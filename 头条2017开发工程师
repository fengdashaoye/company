(1)变量a是一个64位有符号的整数，初始值用16进制表示为：0x7FFFFFFFFFFFFFFF;变量b是一个64位有符号的整数，初始值用16进制表示为：0x8000000000000000。则a+b的结果用10进制表示为多少？
答案为-1
a为127之类的,b为-128之类的
(2)TCP建立连接的三次握手中，第二次握手发送的包会包含的标记，最正确的描述是？
SYN,ACK
具体过程需要回忆一下
(3)栈是先进后出的数据结构。给定一个大小为3的初始状态为空的栈，已知一组数据经过这个栈后，
最终的数据顺序依次为：1 3 2 4 ，问原始的进栈数据不可能是以下的那组?
4231
注意栈的大小

操作系统中可以使用LRU(least recently used)内存淘汰旧数据的策略，如果内存需要加载新数据但空间又不足，则会按照最近访问时间进行排序，并将最老的数据淘汰，
假设现在内存空间大小为5，原本内存中没有数据，对内存中数据的访问顺序如下： 1,2,5,3,4,6,1,4,3,6,7,8,3,9
缺10页，注意开头的那5次就缺了

x86 CPU在实模式下解释代码时看到一个地址为2330H:5041H,请问它最终在内存中要找的地址是多少？
28341H
2330*16 + 5041 = 23300 + 5041

头条的2017校招开始了！为了这次校招，我们组织了一个规模宏大的出题团队，每个出题人都出了一些有趣的题目，而我们现在想把这些题目组合成若干场考试出来，在选题之前，我们对题目进行了盲审，并定出了每道题的难度系统。一场考试包含3道开放性题目，假设他们的难度从小到大分别为a,b,c，我们希望这3道题能满足下列条件：
a<=b<=c
b-a<=10
c-b<=10
所有出题人一共出了n道开放性题目。现在我们想把这n道题分布到若干场考试中（1场或多场，每道题都必须使用且只能用一次），然而由于上述条件的限制，可能有一些考试没法凑够3道题，因此出题人就需要多出一些适当难度的题目来让每场考试都达到要求，然而我们出题已经出得很累了，你能计算出我们最少还需要再出几道题吗？ 
输入描述:
输入的第一行包含一个整数n，表示目前已经出好的题目数量。

第二行给出每道题目的难度系数d1,d2,...,dn。 

数据范围

对于30%的数据，1 ≤ n,di ≤ 5;

对于100%的数据，1 ≤ n ≤ 10^5,1 ≤ di ≤ 100。

在样例中，一种可行的方案是添加2个难度分别为20和50的题目，这样可以组合成两场考试：（20 20 23）和（35,40,50）。


输出描述:
输出只包括一行，即所求的答案。

输入例子1:
4  
20 35 23 40

输出例子1:
2
思路:
这道题其实很简单，把输入的排序，然后按照差值10分段，最小的为一组，慢慢计算
代码:
package jianzhi;
import java.util.*;
import java.text.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class exam {
	public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        String line = in.nextLine();
        int num = Integer.parseInt(line);
        String lineindex = "";
        lineindex = in.nextLine();
        String[] grade = lineindex.split(" ");
        int[] level = new int[grade.length];
        for(int i = 0; i < level.length; i++){
            level[i] = Integer.parseInt(grade[i]);
        }
		
        
        Arrays.sort(level);
        ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
        int start = level[0];
        ArrayList<Integer> middle = new ArrayList<Integer>();
        middle.add(start);
        for(int i = 1; i < level.length; i++){
            if(level[i] - start > 10){
                start = level[i];
                list.add(middle);
                middle = new ArrayList<Integer>();
                middle.add(start);
            }else{
                middle.add(level[i]);
            }
        }
        list.add(middle);
        int result = 0;
        for(int i = 0; i < list.size(); i++){
        	int length = list.get(i).size();
            int number = length % 3;
            if(number == 1){
                if(i < list.size()-1){
                    if(list.get(i+1).get(0) - list.get(i).get(list.get(i).size()-1) <= 10){
                        list.get(i+1).remove(0);
                        list.get(i+1).remove(0);
                    }else{
                        result += 2;
                    }
                }else{
                    result += 2;
                }
            }else if(number == 2){
                if(i < list.size()-1){
                    if(list.get(i+1).get(0) - list.get(i).get(list.get(i).size()-1) <= 10){
                        list.get(i+1).remove(0);
                    }else{
                        result += 1;
                    }
                }else{
                    result += 1;
                }
            }
        }
        System.out.println(String.valueOf(result));
        
    }

}



java进制转换
java中进行二进制，八进制，十六进制，十进制间进行相互转换      
十进制转成十六进制：
Integer.toHexString(int i)
十进制转成八进制
Integer.toOctalString(int i)
十进制转成二进制
Integer.toBinaryString(int i)
十六进制转成十进制
Integer.valueOf("FFFF",16).toString()
八进制转成十进制
Integer.valueOf("876",8).toString()
二进制转十进制
Integer.valueOf("0101",2).toString()

题目:
给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。 
输入描述:
第一行包含两个整数n,m. 

第二行给出n个整数A1，A2，...，An。

数据范围

对于30%的数据，1 <= n, m <= 1000

对于100%的数据，1 <= n, m, Ai <= 10^5


输出描述:
输出仅包括一行，即所求的答案

输入例子1:
3 10  
6 5 10

输出例子1:
2

代码，内存超过限制
import java.util.*;
import java.text.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Main{
    public static void main(String[] args){
        Main test = new Main();
        Scanner in = new Scanner(System.in);
        String line = in.nextLine();
        String[] number = line.split(" ");
        int n = Integer.parseInt(number[0]);
        int m = Integer.parseInt(number[1]);
        String lineindex = "";
        lineindex = in.nextLine();
        String[] grade = lineindex.split(" ");
        int[] element = new int[grade.length];
        for(int i = 0; i < element.length; i++){
            element[i] = Integer.parseInt(grade[i]);
        }
        String[] result = new String[n];
        for(int i = 0; i < n; i++){
            result[i] = Integer.toBinaryString(element[i]);
        }
        int final_result = 0;
        String duibi = Integer.toBinaryString(m);
        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                String jieguo = test.yihuo(result[i], result[j]);
                if(test.max_number(jieguo, duibi)){
                    final_result++;
                }
            }
        }
        System.out.println(String.valueOf(final_result));
    }
    public boolean max_number(String a, String b){
        /*int result = 0;
        for(int i = a.length()-1, j = 0; i >= 0; i--,j++){
            if(a.charAt(i) == '1'){
                result += Math.pow(2,j);
            }
        }
        if(result > m){
            return true;
        }
        return false;*/
        int k = 0;
        for(; k < a.length(); k++){
            if(a.charAt(k) != '0'){
                break;
            }
        }
        a = a.substring(k, a.length());
        if(a.length() > b.length()){
            return true;
        }
        if(a.length() < b.length()){
            return false;
        }
        if(a.equals(b)){
            return false;
        }
        if(a.length() == b.length()){
            for(int i = 0; i < a.length() && i < b.length(); i++){
            /*if((a.charAt(i) - '0') < (b.charAt(i) - '0')){
                return false;
            }else if((a.charAt(i) - '0') > (b.charAt(i) - '0')){
                return true;
            }*/
            	if(a.charAt(i) == '0' && b.charAt(i) == '1'){
                    return false;
                }else if(a.charAt(i) == '1' && b.charAt(i) == '0'){
                    return true;
                }
        	}
        }
        
        return false;
    }
    public String yihuo(String a, String b){
        /*String less = a.length() <= b.length() ? a : b;
        String more = a.length() > b.length() ? a : b;
        StringBuffer result = new StringBuffer();
        int i = less.length()-1;
        int j = more.length()-1;
        for(; i >= 0; i--,j--){
            if(less.charAt(i) != more.charAt(j)){
                result.insert(0,'1');
            }else{
                result.insert(0,'0');
            }
        }
        result.insert(0, more.substring(0, j+1));
        return result.toString();*/
        int length = a.length() <= b.length() ? a.length() : b.length();
        StringBuffer result = new StringBuffer();
        int i = a.length() - 1;
        int j = b.length() - 1;
        for(; i >= 0 && j >= 0; i--,j--){
            if(a.charAt(i) != b.charAt(j)){
            	result.insert(0,'1');
            }else{
                result.insert(0,'0');
            }
        }
        if(i >= 0){
            result.insert(0, a.substring(0, i+1));
        }
        if(j >= 0){
            result.insert(0, b.substring(0, j+1));
        }
        return result.toString();
    }
}



别人的思路和代码:
直接计算肯定是超时的，所以这问题不能使用暴力破解，考虑到从高位到地位，依次进行位运算，如果两个数异或结果在某高位为1，而m的对应位为0
，则肯定任何这两位异或结果为1的都会比m大。
由此，考虑使用字典树（TrieTree）从高位到第位建立字典，再使用每个元素依次去字典中查对应高位异或为1， 而m为0的数的个数，相加在除以2既
是最终的结果；直接贴出代码如下，非原创，欢迎讨论；
补充：queryTrieTree在搜索的过程中，是从高位往低位搜索，那么，如果有一个数与字典中的数异或结果的第k位大于m的第k位，那么该数与对应分支
中所有的数异或结果都会大于m， 否则，就要搜索在第k位异或相等的情况下，更低位的异或结果。queryTrieTree中四个分支的作用分别如下：
1. aDigit=1， mDigit=1时，字典中第k位为0，异或结果为1，需要继续搜索更低位，第k位为1，异或结果为0，小于mDigit，不用理会；
2. aDigit=0， mDigit=1时，字典中第k位为1，异或结果为1，需要继续搜索更低位，第k位为0，异或结果为0，小于mDigit，不用理会；
3. aDigit=1， mDigit=0时，字典中第k位为0，异或结果为1，与对应分支所有数异或，结果都会大于m，第k位为1，异或结果为0，递归获得结果；
4. aDigit=0， mDigit=0时，字典中第k位为1，异或结果为1，与对应分支所有数异或，结果都会大于m，第k位为0，异或结果为0，递归获得结果；

基于a和m，寻找b的个数，然后这是每一个a找其所有可能的b，所以最终结果要除以2.
我明白为什么mDigit为0和为1时做法为什么不同了，当为1时，如果异或结果为0，则不用管，如果为1，则aDigit和mDigit都需要往后看
所以才会:
if(aDigit == 1 && mDigit == 1) {
                if(current.next[0] == null)
                    return 0;
                current = current.next[0];
            } else if (aDigit == 0 && mDigit == 1) {
                if(current.next[1] == null)
                    return 0;
                current = current.next[1];
            }
当mDigit为0时，如果aDigit为1，结果有两种，即current.next[0]的个数，以及current.next[1]后的情况，对于第一种，直接看其是否存在，
存在则加上count，不存在则加上0.对于第二种，因为1^1为0，则aDigit和mDigit都需要往后看，但是这时需要返回p+q了，不能像mDigit为1时
简单地把count往后移动，因为这里就要出结果p+q了，所以只能用递归。
	    
	    

import java.util.Scanner;
 
public class Main {
    private static class TrieTree {
        TrieTree[] next = new TrieTree[2];
        int count = 1;
    }
 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNext()){
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = sc.nextInt();
            }
            System.out.println(solve(a, m));
        }
    }
 
    private static long solve(int[] a, int m) {
        TrieTree trieTree = buildTrieTree(a);
        long result = 0;
        for (int i = 0; i < a.length; i++) {
            result += queryTrieTree(trieTree, a[i], m, 31);
        }
        return result / 2;
    }
 
    private static long queryTrieTree(TrieTree trieTree, int a, int m, int index) {
        if(trieTree == null)
            return 0;
 
        TrieTree current = trieTree;
        for (int i = index; i >= 0; i--) {
            int aDigit = (a >> i) & 1;
            int mDigit = (m >> i) & 1;
            if(aDigit == 1 && mDigit == 1) {
                if(current.next[0] == null)
                    return 0;
                current = current.next[0];
            } else if (aDigit == 0 && mDigit == 1) {
                if(current.next[1] == null)
                    return 0;
                current = current.next[1];
            } else if (aDigit == 1 && mDigit == 0) {
                long p = queryTrieTree(current.next[1], a, m, i - 1);
                long q = current.next[0] == null ? 0 : current.next[0].count;
                return p + q;
            } else if (aDigit == 0 && mDigit == 0) {
                long p = queryTrieTree(current.next[0], a, m, i - 1);
                long q = current.next[1] == null ? 0 : current.next[1].count;
                return p + q;
            }
        }
        return 0;
    }
 
    private static TrieTree buildTrieTree(int[] a) {
        TrieTree trieTree = new TrieTree();
        for (int i = 0; i < a.length; i++) {
            TrieTree current = trieTree;
            for (int j = 31; j >= 0; j--) {
                int digit = (a[i] >> j) & 1;
                if(current.next[digit] == null) {
                    current.next[digit] = new TrieTree();
                } else {
                    current.next[digit].count ++;
                }
                current = current.next[digit];
            }
        }
        return trieTree;
    }
}













